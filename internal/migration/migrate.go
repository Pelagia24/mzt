package migration

import (
	"errors"
	"fmt"
	"log"
	"math/rand"
	"mzt/config"
	"mzt/internal/entity"
	"mzt/internal/repository"
	"time"

	"github.com/google/uuid"
	"golang.org/x/crypto/bcrypt"
	"gorm.io/gorm"
)

func RunMigrations(cfg *config.Config) error {
	log.Println("Starting database migrations...")

	userRepo := repository.NewUserRepo(cfg)
	if userRepo == nil {
		return fmt.Errorf("failed to initialize user repository")
	}

	if err := userRepo.DB.Exec("CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"").Error; err != nil {
		return fmt.Errorf("failed to enable UUID extension: %v", err)
	}

	err := userRepo.DB.AutoMigrate(
		&entity.User{},
		&entity.UserData{},
		&entity.Auth{},
		&entity.Payment{},
		&entity.Course{},
		&entity.CourseAssignment{},
		&entity.Lesson{},
		&entity.Event{},
		&entity.CoursePrice{},
	)
	if err != nil {
		return fmt.Errorf("failed to migrate database schema: %v", err)
	}

	if err := seedUsers(userRepo); err != nil {
		log.Printf("Warning: Failed to seed users: %v", err)
	}

	courseRepo := repository.NewCourseRepo(cfg)
	if courseRepo == nil {
		return fmt.Errorf("failed to initialize course repository")
	}

	if err := seedCourses(courseRepo); err != nil {
		log.Printf("Warning: Failed to seed courses: %v", err)
	}

	if err := seedCoursePrices(courseRepo); err != nil {
		log.Printf("Warning: Failed to seed course prices: %v", err)
	}

	if err := seedLessons(courseRepo); err != nil {
		log.Printf("Warning: Failed to seed lessons: %v", err)
	}

	if err := seedUserTransactions(userRepo, courseRepo); err != nil {
		log.Printf("Warning: Failed to seed user transactions: %v", err)
	}

	eventRepo := repository.NewEventRepo(cfg)
	if eventRepo == nil {
		return fmt.Errorf("failed to initialize event repository")
	}

	if err := seedEvents(eventRepo, courseRepo); err != nil {
		log.Printf("Warning: Failed to seed events: %v", err)
	}

	// Seed course assignments
	err = seedCourseAssignments(userRepo, courseRepo)
	if err != nil {
		return fmt.Errorf("failed to seed course assignments: %v", err)
	}

	log.Println("Database migrations completed")
	return nil
}

func seedUsers(userRepo *repository.UserRepo) error {
	passwordHash, err := bcrypt.GenerateFromPassword([]byte("password"), bcrypt.DefaultCost)
	if err != nil {
		return fmt.Errorf("failed to hash password: %v", err)
	}

	calculateAge := func(birthdate time.Time) uint {
		now := time.Now()
		age := now.Year() - birthdate.Year()
		if now.Month() < birthdate.Month() || (now.Month() == birthdate.Month() && now.Day() < birthdate.Day()) {
			age--
		}
		return uint(age)
	}

	testUsers := []struct {
		user     *entity.User
		userData *entity.UserData
		auth     *entity.Auth
	}{
		{
			user: &entity.User{
				ID:         uuid.New(),
				PasswdHash: string(passwordHash),
				Role:       1,
			},
			userData: &entity.UserData{
				Email:           "admin@example.com",
				Name:            "Admin User",
				Birthdate:       time.Date(1990, 1, 1, 0, 0, 0, 0, time.UTC),
				PhoneNumber:     "+79001234567",
				Telegram:        "@admin_user",
				City:            "Moscow",
				Employment:      "Tech Lead",
				IsBusinessOwner: "No",
				PositionAtWork:  "Senior Developer",
				MonthIncome:     150000,
			},
			auth: &entity.Auth{
				Key: "admin_key",
			},
		},
		{
			user: &entity.User{
				ID:         uuid.New(),
				PasswdHash: string(passwordHash),
				Role:       0,
			},
			userData: &entity.UserData{
				Email:           "ivan@example.com",
				Name:            "Иван Петров",
				Birthdate:       time.Date(1995, 5, 15, 0, 0, 0, 0, time.UTC),
				PhoneNumber:     "+79157894561",
				Telegram:        "@ivan_petrov",
				City:            "Saint Petersburg",
				Employment:      "Business Owner",
				IsBusinessOwner: "Yes",
				PositionAtWork:  "CEO",
				MonthIncome:     250000,
			},
			auth: &entity.Auth{
				Key: "ivan_key",
			},
		},
		{
			user: &entity.User{
				ID:         uuid.New(),
				PasswdHash: string(passwordHash),
				Role:       0,
			},
			userData: &entity.UserData{
				Email:           "alex@example.com",
				Name:            "Алексей Смирнов",
				Birthdate:       time.Date(1988, 11, 30, 0, 0, 0, 0, time.UTC),
				PhoneNumber:     "+79567891234",
				Telegram:        "@alex_sm",
				City:            "Moscow",
				Employment:      "Business Owner",
				IsBusinessOwner: "Yes",
				PositionAtWork:  "Founder",
				MonthIncome:     300000,
			},
			auth: &entity.Auth{
				Key: "alex_key",
			},
		},
		{
			user: &entity.User{
				ID:         uuid.New(),
				PasswdHash: string(passwordHash),
				Role:       0,
			},
			userData: &entity.UserData{
				Email:           "dmitry@example.com",
				Name:            "Дмитрий Иванов",
				Birthdate:       time.Date(1992, 8, 23, 0, 0, 0, 0, time.UTC),
				PhoneNumber:     "+79269874563",
				Telegram:        "@dmitry_iv",
				City:            "Kazan",
				Employment:      "Business Owner",
				IsBusinessOwner: "Yes",
				PositionAtWork:  "Managing Director",
				MonthIncome:     280000,
			},
			auth: &entity.Auth{
				Key: "dmitry_key",
			},
		},
		{
			user: &entity.User{
				ID:         uuid.New(),
				PasswdHash: string(passwordHash),
				Role:       0,
			},
			userData: &entity.UserData{
				Email:           "sergey@example.com",
				Name:            "Сергей Кузнецов",
				Birthdate:       time.Date(1993, 7, 20, 0, 0, 0, 0, time.UTC),
				PhoneNumber:     "+79876543210",
				Telegram:        "@sergey_k",
				City:            "Novosibirsk",
				Employment:      "Business Owner",
				IsBusinessOwner: "Yes",
				PositionAtWork:  "Executive Director",
				MonthIncome:     320000,
			},
			auth: &entity.Auth{
				Key: "sergey_key",
			},
		},
	}

	for _, tu := range testUsers {
		tu.userData.Age = calculateAge(tu.userData.Birthdate)

		err := userRepo.DB.Transaction(func(tx *gorm.DB) error {
			var existingUserData entity.UserData
			err := tx.Where("email = ?", tu.userData.Email).First(&existingUserData).Error
			if err != nil {
				if errors.Is(err, gorm.ErrRecordNotFound) {
					tu.userData.UserID = tu.user.ID
					tu.auth.UserID = tu.user.ID

					if err := tx.Create(tu.user).Error; err != nil {
						return fmt.Errorf("failed to create user: %v", err)
					}
					if err := tx.Create(tu.userData).Error; err != nil {
						return fmt.Errorf("failed to create user data: %v", err)
					}
					if err := tx.Create(tu.auth).Error; err != nil {
						return fmt.Errorf("failed to create auth: %v", err)
					}
					log.Printf("Created user: %s (age: %d)", tu.userData.Email, tu.userData.Age)
				} else {
					return fmt.Errorf("failed to check existing user: %v", err)
				}
			} else {
				log.Printf("User already exists: %s", tu.userData.Email)
			}
			return nil
		})

		if err != nil {
			log.Printf("Warning: Failed to process user %s: %v", tu.userData.Email, err)
			continue
		}
	}

	return nil
}

func seedCourses(courseRepo *repository.CourseRepo) error {
	courses := []*entity.Course{
		{
			CourseID: uuid.New(),
			Title:    "Мужское лидерство и харизма",
			Desc:     "Развитие лидерских качеств, харизмы и уверенности в себе. Формирование сильного мужского характера и умения вести за собой",
		},
		{
			CourseID: uuid.New(),
			Title:    "Бизнес-сообщество и нетворкинг",
			Desc:     "Создание и развитие сильного бизнес-сообщества. Эффективные стратегии нетворкинга и построения деловых связей",
		},
		{
			CourseID: uuid.New(),
			Title:    "Мужская психология и эмоциональный интеллект",
			Desc:     "Понимание мужской психологии, развитие эмоционального интеллекта и умения управлять эмоциями в бизнесе",
		},
		{
			CourseID: uuid.New(),
			Title:    "Стратегическое мышление и принятие решений",
			Desc:     "Развитие стратегического мышления, анализ рисков и принятие взвешенных решений в бизнесе",
		},
		{
			CourseID: uuid.New(),
			Title:    "Мужская эффективность и тайм-менеджмент",
			Desc:     "Повышение личной эффективности, управление временем и приоритизация задач в бизнесе",
		},
		{
			CourseID: uuid.New(),
			Title:    "Бизнес-переговоры и убеждение",
			Desc:     "Мастерство ведения переговоров, техники убеждения и достижения взаимовыгодных соглашений",
		},
		{
			CourseID: uuid.New(),
			Title:    "Мужское сообщество и менторство",
			Desc:     "Создание поддерживающего мужского сообщества, развитие менторских навыков и передача опыта",
		},
		{
			CourseID: uuid.New(),
			Title:    "Личный бренд и репутация",
			Desc:     "Построение сильного личного бренда, управление репутацией и создание экспертного статуса",
		},
		{
			CourseID: uuid.New(),
			Title:    "Мужское здоровье и энергия",
			Desc:     "Управление энергией, стрессом и здоровьем для достижения максимальной эффективности в бизнесе",
		},
		{
			CourseID: uuid.New(),
			Title:    "Бизнес-этика и ценности",
			Desc:     "Формирование сильных бизнес-ценностей, этичное ведение бизнеса и социальная ответственность",
		},
	}

	for _, course := range courses {
		err := courseRepo.DB.Transaction(func(tx *gorm.DB) error {
			var existingCourse entity.Course
			err := tx.Where("title = ?", course.Title).First(&existingCourse).Error
			if err != nil {
				if errors.Is(err, gorm.ErrRecordNotFound) {
					if err := tx.Create(course).Error; err != nil {
						return fmt.Errorf("failed to create course: %v", err)
					}
					log.Printf("Created course: %s", course.Title)
				} else {
					return fmt.Errorf("failed to check existing course: %v", err)
				}
			} else {
				log.Printf("Course already exists: %s", course.Title)
			}
			return nil
		})

		if err != nil {
			log.Printf("Warning: Failed to process course %s: %v", course.Title, err)
			continue
		}
	}

	return nil
}

func seedLessons(courseRepo *repository.CourseRepo) error {
	var courses []entity.Course
	if err := courseRepo.DB.Find(&courses).Error; err != nil {
		return fmt.Errorf("failed to get courses for lessons: %v", err)
	}

	courseMap := make(map[string]uuid.UUID)
	for _, course := range courses {
		courseMap[course.Title] = course.CourseID
	}

	lessonsByCourse := map[string][]struct {
		Title       string
		Description string
		VideoURL    string
		Text        string
	}{
		"Мужское лидерство и харизма": {
			{
				Title:       "Основы лидерства",
				Description: "Что такое лидерство и как развить лидерские качества. Типы лидеров и их характеристики",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Основы лидерства\n\n## Введение\nЛидерство - это способность влиять на других людей и вести их к достижению общих целей. В этом уроке мы рассмотрим фундаментальные принципы лидерства и то, как их можно развить.\n\n## Ключевые аспекты лидерства\n1. **Видение** - способность видеть будущее и формулировать цели\n2. **Коммуникация** - умение четко доносить свои идеи\n3. **Принятие решений** - способность принимать взвешенные решения\n4. **Эмоциональный интеллект** - понимание и управление эмоциями\n\n## Практические упражнения\n- Анализ лидерских качеств\n- Разработка личного видения\n- Тренировка навыков коммуникации\n\n## Домашнее задание\n1. Составьте список своих лидерских качеств\n2. Определите области для развития\n3. Создайте план действий по улучшению навыков",
			},
			{
				Title:       "Развитие харизмы",
				Description: "Практические техники развития харизмы и уверенности в себе",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Развитие харизмы\n\n## Что такое харизма?\nХаризма - это способность привлекать и вдохновлять других людей. Это не врожденное качество, а навык, который можно развить.\n\n## Компоненты харизмы\n- **Уверенность в себе**\n- **Эмпатия**\n- **Навыки коммуникации**\n- **Аутентичность**\n\n## Техники развития\n1. Работа над осанкой и жестами\n2. Развитие активного слушания\n3. Практика публичных выступлений\n4. Работа над уверенностью\n\n## Практические задания\n- Запись и анализ своих выступлений\n- Тренировка невербальной коммуникации\n- Развитие навыков сторителлинга",
			},
			{
				Title:       "Сила характера",
				Description: "Формирование сильного характера и умения принимать решения",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Сила характера\n\n## Основы сильного характера\nСильный характер - это основа успешного лидерства. Он включает в себя:\n\n- **Целостность**\n- **Ответственность**\n- **Настойчивость**\n- **Самодисциплина**\n\n## Развитие характера\n### Ежедневные практики\n1. Медитация и рефлексия\n2. Физические упражнения\n3. Чтение и самообразование\n4. Ведение дневника\n\n### Ключевые принципы\n- Принятие ответственности за свои решения\n- Развитие эмоциональной устойчивости\n- Формирование здоровых привычек\n\n## Практические упражнения\n- Анализ сложных ситуаций\n- Разработка личного кодекса чести\n- Тренировка принятия решений",
			},
		},
		"Бизнес-сообщество и нетворкинг": {
			{
				Title:       "Создание бизнес-сообщества",
				Description: "Принципы формирования и развития сильного бизнес-сообщества",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Создание бизнес-сообщества\n\n## Основы сообщества\nБизнес-сообщество - это группа людей, объединенных общими целями и ценностями в бизнесе.\n\n## Ключевые элементы\n1. **Общее видение**\n2. **Взаимная поддержка**\n3. **Обмен опытом**\n4. **Совместное развитие**\n\n## Этапы создания\n### 1. Формирование ядра\n- Определение целей\n- Выбор участников\n- Создание правил\n\n### 2. Развитие\n- Организация мероприятий\n- Создание коммуникационных каналов\n- Развитие культуры сообщества\n\n## Практические шаги\n- Разработка стратегии развития\n- Создание системы менторства\n- Организация регулярных встреч",
			},
			{
				Title:       "Эффективный нетворкинг",
				Description: "Стратегии построения деловых связей и развития сети контактов",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Эффективный нетворкинг\n\n## Основы нетворкинга\nНетворкинг - это искусство построения и поддержания деловых связей.\n\n## Стратегии\n### Подготовка\n- Определение целей\n- Исследование целевой аудитории\n- Подготовка самопрезентации\n\n### Навыки\n- Активное слушание\n- Запоминание деталей\n- Последующее общение\n\n## Практические техники\n1. **Подход к новым контактам**\n   - Начало разговора\n   - Поиск общих интересов\n   - Обмен контактами\n\n2. **Поддержание связей**\n   - Регулярное общение\n   - Предложение ценности\n   - Взаимная поддержка\n\n## Домашнее задание\n- Составление списка целевых контактов\n- Разработка плана развития сети\n- Практика навыков коммуникации",
			},
			{
				Title:       "Управление сообществом",
				Description: "Практические аспекты управления и развития бизнес-сообщества",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Управление сообществом\n\n## Роль управляющего\nУправляющий сообществом - это человек, который:\n- Создает условия для развития\n- Поддерживает активность\n- Решает конфликты\n- Развивает культуру\n\n## Ключевые задачи\n1. **Организация мероприятий**\n   - Планирование\n   - Проведение\n   - Анализ результатов\n\n2. **Коммуникация**\n   - Информационные рассылки\n   - Обратная связь\n   - Модерация обсуждений\n\n3. **Развитие сообщества**\n   - Привлечение новых участников\n   - Удержание существующих\n   - Создание новых возможностей\n\n## Инструменты управления\n- CRM системы\n- Платформы для коммуникации\n- Инструменты аналитики\n\n## Практические рекомендации\n- Регулярный анализ активности\n- Адаптация стратегии\n- Развитие лидеров внутри сообщества",
			},
		},
		"Мужская психология и эмоциональный интеллект": {
			{
				Title:       "Основы эмоционального интеллекта",
				Description: "Понимание эмоций и их роли в бизнесе",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Основы эмоционального интеллекта\n\n## Введение\nЭмоциональный интеллект - это способность понимать и управлять своими эмоциями и эмоциями других людей.\n\n## Роль эмоционального интеллекта в бизнесе\n- Понимание эмоций и их роли в деловой среде\n- Развитие эмоциональной устойчивости\n- Управление эмоциями в стрессовых ситуациях\n\n## Практические упражнения\n- Анализ эмоций в различных ситуациях\n- Разработка стратегий управления эмоциями\n- Тренировка навыков саморегуляции",
			},
			{
				Title:       "Управление эмоциями",
				Description: "Техники управления эмоциями в стрессовых ситуациях",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Управление эмоциями\n\n## Основные техники управления эмоциями\n1. **Активное слушание**\n2. **Саморегуляция**\n3. **Рефлексия**\n4. **Стратегии переключения внимания**\n\n## Практические упражнения\n- Анализ эмоций в различных ситуациях\n- Разработка стратегий управления эмоциями\n- Тренировка навыков саморегуляции",
			},
			{
				Title:       "Психологическая устойчивость",
				Description: "Развитие психологической устойчивости и стрессоустойчивости",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Психологическая устойчивость\n\n## Основы психологической устойчивости\nПсихологическая устойчивость - это способность человека эффективно реагировать на стресс и сохранять эмоциональное равновесие.\n\n## Факторы, влияющие на психологическую устойчивость\n- **Личностные характеристики**\n- **Средовые факторы**\n- **Стратегии управления стрессом**\n\n## Практические упражнения\n- Анализ ситуаций, вызывающих стресс\n- Разработка стратегий управления стрессом\n- Тренировка навыков саморегуляции\n\n## Домашнее задание\n1. Составьте список стрессовых ситуаций\n2. Разработайте план управления стрессом\n3. Ведите дневник эмоционального состояния",
			},
		},
		"Стратегическое мышление и принятие решений": {
			{
				Title:       "Основы стратегического мышления",
				Description: "Развитие стратегического мышления и видения",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Основы стратегического мышления\n\n## Введение\nСтратегическое мышление - это способность анализировать ситуацию, видеть долгосрочные перспективы и принимать решения, ведущие к достижению целей.\n\n## Ключевые аспекты\n1. **Анализ ситуации**\n   - Понимание контекста\n   - Выявление трендов\n   - Оценка возможностей\n\n2. **Видение будущего**\n   - Формулирование целей\n   - Планирование путей достижения\n   - Адаптация к изменениям\n\n## Практические упражнения\n- Анализ бизнес-кейсов\n- Разработка стратегических планов\n- Оценка рисков и возможностей\n\n## Домашнее задание\n1. Проведите анализ своей текущей ситуации\n2. Определите долгосрочные цели\n3. Разработайте стратегический план действий",
			},
			{
				Title:       "Анализ рисков",
				Description: "Методы анализа рисков и возможностей в бизнесе",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Анализ рисков\n\n## Основы анализа рисков\nАнализ рисков - это процесс выявления, оценки и управления потенциальными угрозами и возможностями.\n\n## Методы анализа\n1. **Качественный анализ**\n   - Оценка вероятности\n   - Оценка воздействия\n   - Приоритизация рисков\n\n2. **Количественный анализ**\n   - Статистические методы\n   - Финансовое моделирование\n   - Сценарный анализ\n\n## Практические инструменты\n- Матрица рисков\n- Дерево решений\n- Анализ чувствительности\n\n## Домашнее задание\n1. Составьте список рисков вашего проекта\n2. Оцените их вероятность и влияние\n3. Разработайте стратегии управления рисками",
			},
			{
				Title:       "Принятие решений",
				Description: "Техники принятия взвешенных решений в условиях неопределенности",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Принятие решений\n\n## Процесс принятия решений\nЭффективное принятие решений включает несколько ключевых этапов:\n\n1. **Сбор информации**\n   - Анализ данных\n   - Консультации с экспертами\n   - Оценка альтернатив\n\n2. **Анализ вариантов**\n   - Оценка плюсов и минусов\n   - Анализ последствий\n   - Учет ограничений\n\n3. **Выбор решения**\n   - Применение критериев\n   - Оценка рисков\n   - Планирование реализации\n\n## Практические техники\n- Матрица принятия решений\n- Метод шести шляп\n- Анализ последствий\n\n## Домашнее задание\n1. Проанализируйте недавнее важное решение\n2. Примените изученные техники\n3. Разработайте план улучшения процесса принятия решений",
			},
		},
		"Мужская эффективность и тайм-менеджмент": {
			{
				Title:       "Основы тайм-менеджмента",
				Description: "Принципы эффективного управления временем",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Основы тайм-менеджмента\n\n## Ключевые принципы\nЭффективное управление временем основано на нескольких фундаментальных принципах:\n\n1. **Планирование**\n   - Постановка целей\n   - Расстановка приоритетов\n   - Создание расписания\n\n2. **Фокусировка**\n   - Устранение отвлекающих факторов\n   - Работа в потоке\n   - Регулярные перерывы\n\n3. **Делегирование**\n   - Определение задач для передачи\n   - Выбор исполнителей\n   - Контроль результатов\n\n## Практические инструменты\n- Метод Помодоро\n- Матрица Эйзенхауэра\n- Система GTD\n\n## Домашнее задание\n1. Проанализируйте текущее использование времени\n2. Внедрите один из инструментов планирования\n3. Разработайте систему учета времени",
			},
			{
				Title:       "Приоритизация задач",
				Description: "Методы определения приоритетов и планирования",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Приоритизация задач\n\n## Методы приоритизации\nЭффективная приоритизация - ключ к продуктивности:\n\n1. **Матрица Эйзенхауэра**\n   - Важное и срочное\n   - Важное, но не срочное\n   - Срочное, но не важное\n   - Ни важное, ни срочное\n\n2. **Метод ABC**\n   - A: Критически важные задачи\n   - B: Важные задачи\n   - C: Задачи, которые можно делегировать\n\n## Практические техники\n- Ежедневное планирование\n- Еженедельный обзор\n- Месячное планирование\n\n## Домашнее задание\n1. Составьте список текущих задач\n2. Примените матрицу приоритетов\n3. Разработайте систему регулярного планирования",
			},
			{
				Title:       "Повышение личной эффективности",
				Description: "Техники повышения личной эффективности и продуктивности",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Повышение личной эффективности\n\n## Ключевые факторы эффективности\n\n1. **Энергия и здоровье**\n   - Режим сна\n   - Физическая активность\n   - Правильное питание\n\n2. **Ментальная продуктивность**\n   - Медитация\n   - Управление стрессом\n   - Развитие концентрации\n\n3. **Рабочие привычки**\n   - Утренние ритуалы\n   - Вечерние ритуалы\n   - Системы организации\n\n## Практические упражнения\n- Анализ энергетических циклов\n- Разработка личных ритуалов\n- Создание системы привычек\n\n## Домашнее задание\n1. Отслеживайте уровень энергии\n2. Внедрите новые привычки\n3. Разработайте систему обратной связи",
			},
		},
		"Бизнес-переговоры и убеждение": {
			{
				Title:       "Основы ведения переговоров",
				Description: "Принципы эффективных переговоров",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Основы ведения переговоров\n\n## Ключевые принципы\n\n1. **Подготовка**\n   - Сбор информации\n   - Определение целей\n   - Разработка стратегии\n\n2. **Процесс переговоров**\n   - Установление контакта\n   - Выявление интересов\n   - Поиск решений\n\n3. **Завершение**\n   - Достижение соглашения\n   - Фиксация договоренностей\n   - Поддержание отношений\n\n## Практические техники\n- Активное слушание\n- Задавание вопросов\n- Управление эмоциями\n\n## Домашнее задание\n1. Подготовьтесь к реальным переговорам\n2. Практикуйте техники коммуникации\n3. Анализируйте результаты переговоров",
			},
			{
				Title:       "Техники убеждения",
				Description: "Методы убеждения и влияния на собеседника",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Техники убеждения\n\n## Основы убеждения\n\n1. **Психологические принципы**\n   - Взаимный обмен\n   - Социальное доказательство\n   - Авторитет\n\n2. **Коммуникативные техники**\n   - Сторителлинг\n   - Метафоры\n   - Визуализация\n\n3. **Этические аспекты**\n   - Честность\n   - Прозрачность\n   - Взаимная выгода\n\n## Практические упражнения\n- Разработка убедительных презентаций\n- Практика сторителлинга\n- Анализ успешных убеждений\n\n## Домашнее задание\n1. Создайте убедительную презентацию\n2. Практикуйте техники влияния\n3. Анализируйте результаты убеждения",
			},
			{
				Title:       "Достижение соглашений",
				Description: "Стратегии достижения взаимовыгодных соглашений",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Достижение соглашений\n\n## Стратегии достижения соглашений\n\n1. **Подготовка к соглашению**\n   - Определение зон согласия\n   - Выявление интересов сторон\n   - Разработка альтернатив\n\n2. **Процесс согласования**\n   - Поиск общих интересов\n   - Творческое решение проблем\n   - Управление конфликтами\n\n3. **Заключение соглашения**\n   - Фиксация договоренностей\n   - Проверка понимания\n   - Планирование реализации\n\n## Практические техники\n- Метод Гарвардских переговоров\n- Техника BATNA\n- Принцип win-win\n\n## Домашнее задание\n1. Проанализируйте прошлые соглашения\n2. Разработайте стратегию для будущих переговоров\n3. Практикуйте техники достижения соглашений",
			},
		},
		"Мужское сообщество и менторство": {
			{
				Title:       "Основы менторства",
				Description: "Принципы эффективного менторства",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Основы менторства\n\n## Роль ментора\n\n1. **Функции ментора**\n   - Наставничество\n   - Поддержка\n   - Развитие\n\n2. **Навыки ментора**\n   - Активное слушание\n   - Задавание вопросов\n   - Обратная связь\n\n3. **Этические принципы**\n   - Конфиденциальность\n   - Профессионализм\n   - Ответственность\n\n## Практические аспекты\n- Структура менторских сессий\n- Методы развития\n- Оценка прогресса\n\n## Домашнее задание\n1. Разработайте план менторства\n2. Практикуйте навыки наставничества\n3. Создайте систему обратной связи",
			},
			{
				Title:       "Развитие сообщества",
				Description: "Создание и развитие поддерживающего сообщества",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Развитие сообщества\n\n## Основы развития сообщества\n\n1. **Создание сообщества**\n   - Определение целей\n   - Выбор участников\n   - Установление правил\n\n2. **Развитие активности**\n   - Организация мероприятий\n   - Создание коммуникаций\n   - Поддержка инициатив\n\n3. **Управление сообществом**\n   - Модерация\n   - Разрешение конфликтов\n   - Развитие лидеров\n\n## Практические инструменты\n- Платформы для коммуникации\n- Системы организации мероприятий\n- Инструменты аналитики\n\n## Домашнее задание\n1. Проанализируйте существующие сообщества\n2. Разработайте план развития\n3. Внедрите систему управления",
			},
			{
				Title:       "Передача опыта",
				Description: "Методы эффективной передачи знаний и опыта",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Передача опыта\n\n## Методы передачи опыта\n\n1. **Структурированный подход**\n   - Планирование обучения\n   - Разработка материалов\n   - Проверка понимания\n\n2. **Практические методы**\n   - Наставничество\n   - Коучинг\n   - Обучение действием\n\n3. **Оценка эффективности**\n   - Обратная связь\n   - Измерение прогресса\n   - Корректировка подхода\n\n## Практические техники\n- Создание обучающих материалов\n- Проведение мастер-классов\n- Организация практических сессий\n\n## Домашнее задание\n1. Разработайте план передачи опыта\n2. Создайте обучающие материалы\n3. Проведите практическую сессию",
			},
		},
		"Личный бренд и репутация": {
			{
				Title:       "Создание личного бренда",
				Description: "Основы построения сильного личного бренда",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Создание личного бренда\n\n## Основы личного брендинга\n\n1. **Определение бренда**\n   - Ценности и миссия\n   - Уникальное позиционирование\n   - Целевая аудитория\n\n2. **Разработка стратегии**\n   - Каналы коммуникации\n   - Контент-план\n   - Система обратной связи\n\n3. **Реализация**\n   - Создание контента\n   - Взаимодействие с аудиторией\n   - Развитие сообщества\n\n## Практические инструменты\n- Социальные сети\n- Профессиональные платформы\n- Личный блог\n\n## Домашнее задание\n1. Разработайте стратегию личного бренда\n2. Создайте контент-план\n3. Начните реализацию стратегии",
			},
			{
				Title:       "Управление репутацией",
				Description: "Стратегии управления репутацией в бизнесе",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Управление репутацией\n\n## Основы управления репутацией\n\n1. **Мониторинг**\n   - Отслеживание упоминаний\n   - Анализ обратной связи\n   - Оценка настроений\n\n2. **Стратегия**\n   - Проактивное управление\n   - Реакция на инциденты\n   - Развитие позитивного имиджа\n\n3. **Инструменты**\n   - Системы мониторинга\n   - Платформы коммуникации\n   - Аналитические инструменты\n\n## Практические аспекты\n- Работа с отзывами\n- Кризисные коммуникации\n- Развитие лояльности\n\n## Домашнее задание\n1. Проведите аудит репутации\n2. Разработайте план управления\n3. Внедрите систему мониторинга",
			},
			{
				Title:       "Экспертный статус",
				Description: "Развитие экспертного статуса и авторитета",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Экспертный статус\n\n## Развитие экспертного статуса\n\n1. **Определение ниши**\n   - Выбор специализации\n   - Анализ конкурентов\n   - Позиционирование\n\n2. **Создание контента**\n   - Написание статей\n   - Публичные выступления\n   - Образовательные материалы\n\n3. **Укрепление авторитета**\n   - Участие в конференциях\n   - Публикации в СМИ\n   - Развитие сети контактов\n\n## Практические шаги\n- Создание экспертного блога\n- Проведение вебинаров\n- Участие в профессиональных сообществах\n\n## Домашнее задание\n1. Определите свою экспертизу\n2. Разработайте план развития\n3. Начните создавать экспертный контент",
			},
		},
		"Мужское здоровье и энергия": {
			{
				Title:       "Управление энергией",
				Description: "Техники управления личной энергией",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Управление энергией\n\n## Основы управления энергией\n\n1. **Физическая энергия**\n   - Режим сна\n   - Физическая активность\n   - Питание\n\n2. **Эмоциональная энергия**\n   - Управление стрессом\n   - Позитивное мышление\n   - Эмоциональная устойчивость\n\n3. **Ментальная энергия**\n   - Фокусировка\n   - Приоритизация\n   - Отдых и восстановление\n\n## Практические техники\n- Медитация\n- Физические упражнения\n- Энергетические практики\n\n## Домашнее задание\n1. Отслеживайте уровень энергии\n2. Внедрите новые привычки\n3. Разработайте систему восстановления",
			},
			{
				Title:       "Стресс-менеджмент",
				Description: "Методы управления стрессом и эмоциональным состоянием",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Стресс-менеджмент\n\n## Управление стрессом\n\n1. **Понимание стресса**\n   - Признаки стресса\n   - Триггеры\n   - Влияние на организм\n\n2. **Техники управления**\n   - Дыхательные практики\n   - Медитация\n   - Физическая активность\n\n3. **Профилактика**\n   - Здоровый образ жизни\n   - Баланс работы и отдыха\n   - Поддержка окружения\n\n## Практические упражнения\n- Техники релаксации\n- Управление эмоциями\n- Развитие устойчивости\n\n## Домашнее задание\n1. Определите свои стрессоры\n2. Освойте техники управления\n3. Создайте план профилактики",
			},
			{
				Title:       "Здоровый образ жизни",
				Description: "Принципы поддержания здоровья для максимальной эффективности",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Здоровый образ жизни\n\n## Основы здорового образа жизни\n\n1. **Физическое здоровье**\n   - Регулярные упражнения\n   - Правильное питание\n   - Достаточный сон\n\n2. **Психическое здоровье**\n   - Управление стрессом\n   - Ментальные практики\n   - Эмоциональный баланс\n\n3. **Социальное здоровье**\n   - Поддерживающие отношения\n   - Баланс работы и отдыха\n   - Активный отдых\n\n## Практические рекомендации\n- Планирование питания\n- Режим физической активности\n- Система восстановления\n\n## Домашнее задание\n1. Оцените текущий образ жизни\n2. Разработайте план изменений\n3. Внедрите новые привычки",
			},
		},
		"Бизнес-этика и ценности": {
			{
				Title:       "Основы бизнес-этики",
				Description: "Принципы этичного ведения бизнеса",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Основы бизнес-этики\n\n## Принципы бизнес-этики\n\n1. **Этические основы**\n   - Честность\n   - Прозрачность\n   - Ответственность\n\n2. **Принятие решений**\n   - Этические дилеммы\n   - Оценка последствий\n   - Баланс интересов\n\n3. **Корпоративная культура**\n   - Ценности компании\n   - Поведенческие стандарты\n   - Система поощрений\n\n## Практические аспекты\n- Разработка этического кодекса\n- Обучение сотрудников\n- Система контроля\n\n## Домашнее задание\n1. Проанализируйте этические принципы\n2. Разработайте кодекс поведения\n3. Внедрите систему этического контроля",
			},
			{
				Title:       "Ценности в бизнесе",
				Description: "Формирование и развитие корпоративных ценностей",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Ценности в бизнесе\n\n## Развитие корпоративных ценностей\n\n1. **Определение ценностей**\n   - Личные ценности\n   - Организационные ценности\n   - Общественные ценности\n\n2. **Внедрение ценностей**\n   - Коммуникация\n   - Обучение\n   - Практическое применение\n\n3. **Поддержание ценностей**\n   - Регулярная оценка\n   - Корректировка\n   - Развитие\n\n## Практические инструменты\n- Система ценностей\n- Программы обучения\n- Оценка соответствия\n\n## Домашнее задание\n1. Определите ключевые ценности\n2. Разработайте план внедрения\n3. Создайте систему оценки",
			},
			{
				Title:       "Социальная ответственность",
				Description: "Принципы социальной ответственности в бизнесе",
				VideoURL:    "https://www.youtube.com/embed/re5QbW8-Zz4",
				Text:        "# Социальная ответственность\n\n## Основы социальной ответственности\n\n1. **Области ответственности**\n   - Экология\n   - Социальные проекты\n   - Развитие сообщества\n\n2. **Стратегия реализации**\n   - Определение приоритетов\n   - Разработка программ\n   - Оценка эффективности\n\n3. **Коммуникация**\n   - Прозрачность\n   - Вовлечение стейкхолдеров\n   - Отчетность\n\n## Практические аспекты\n- Экологические инициативы\n- Социальные программы\n- Развитие местных сообществ\n\n## Домашнее задание\n1. Оцените текущую социальную активность\n2. Разработайте план действий\n3. Внедрите систему отчетности",
			},
		},
	}

	for courseTitle, lessons := range lessonsByCourse {
		courseID, exists := courseMap[courseTitle]
		if !exists {
			log.Printf("Warning: Course not found for lessons: %s", courseTitle)
			continue
		}

		for _, lesson := range lessons {
			newLesson := &entity.Lesson{
				LessonID: uuid.New(),
				CourseID: courseID,
				Title:    lesson.Title,
				Summery:  lesson.Description,
				VideoURL: lesson.VideoURL,
				Text:     lesson.Text,
			}

			err := courseRepo.DB.Transaction(func(tx *gorm.DB) error {
				var existingLesson entity.Lesson
				err := tx.Where("course_id = ? AND title = ?", courseID, lesson.Title).First(&existingLesson).Error
				if err != nil {
					if errors.Is(err, gorm.ErrRecordNotFound) {
						if err := tx.Create(newLesson).Error; err != nil {
							return fmt.Errorf("failed to create lesson: %v", err)
						}
						log.Printf("Created lesson: %s for course: %s", lesson.Title, courseTitle)
					} else {
						return fmt.Errorf("failed to check existing lesson: %v", err)
					}
				} else {
					log.Printf("Lesson already exists: %s for course: %s", lesson.Title, courseTitle)
				}
				return nil
			})

			if err != nil {
				log.Printf("Warning: Failed to process lesson %s for course %s: %v", lesson.Title, courseTitle, err)
				continue
			}
		}
	}

	return nil
}

func seedEvents(eventRepo *repository.EventRepo, courseRepo *repository.CourseRepo) error {
	var courses []entity.Course
	if err := courseRepo.DB.Find(&courses).Error; err != nil {
		return fmt.Errorf("failed to get courses for events: %v", err)
	}

	courseMap := make(map[string]uuid.UUID)
	for _, course := range courses {
		courseMap[course.Title] = course.CourseID
	}

	events := []*entity.Event{
		// Мужское лидерство и харизма
		{
			EventID:     uuid.New(),
			CourseID:    courseMap["Мужское лидерство и харизма"],
			Title:       "Введение в мужское лидерство",
			Description: "Основы лидерства, развитие харизмы и уверенности в себе. Практические техники формирования сильного характера",
			EventDate:   time.Now().Add(48 * time.Hour),
			SecretInfo:  "Zoom Meeting ID: 123-456-789, Password: leader2024",
		},
		{
			EventID:     uuid.New(),
			CourseID:    courseMap["Мужское лидерство и харизма"],
			Title:       "Практикум по развитию харизмы",
			Description: "Интенсивный практикум по развитию харизмы и лидерских качеств",
			EventDate:   time.Now().Add(72 * time.Hour),
			SecretInfo:  "Google Meet: meet.google.com/charisma-workshop",
		},
		// Бизнес-сообщество и нетворкинг
		{
			EventID:     uuid.New(),
			CourseID:    courseMap["Бизнес-сообщество и нетворкинг"],
			Title:       "Создание сильного бизнес-сообщества",
			Description: "Стратегии построения и развития бизнес-сообщества. Эффективные практики нетворкинга",
			EventDate:   time.Now().Add(96 * time.Hour),
			SecretInfo:  "Google Meet: meet.google.com/networking-2024",
		},
		{
			EventID:     uuid.New(),
			CourseID:    courseMap["Бизнес-сообщество и нетворкинг"],
			Title:       "Нетворкинг-митап",
			Description: "Практический нетворкинг-митап с успешными предпринимателями",
			EventDate:   time.Now().Add(120 * time.Hour),
			SecretInfo:  "Discord: discord.gg/networking-meetup",
		},
		// Мужская психология и эмоциональный интеллект
		{
			EventID:     uuid.New(),
			CourseID:    courseMap["Мужская психология и эмоциональный интеллект"],
			Title:       "Эмоциональный интеллект в бизнесе",
			Description: "Развитие эмоционального интеллекта и психологической устойчивости. Управление эмоциями в деловой среде",
			EventDate:   time.Now().Add(144 * time.Hour),
			SecretInfo:  "Discord: discord.gg/eq-business",
		},
		{
			EventID:     uuid.New(),
			CourseID:    courseMap["Мужская психология и эмоциональный интеллект"],
			Title:       "Психология успеха",
			Description: "Психологические аспекты достижения успеха в бизнесе",
			EventDate:   time.Now().Add(168 * time.Hour),
			SecretInfo:  "Zoom Meeting ID: 987-654-321, Password: success2024",
		},
		// Стратегическое мышление и принятие решений
		{
			EventID:     uuid.New(),
			CourseID:    courseMap["Стратегическое мышление и принятие решений"],
			Title:       "Стратегическое мышление в бизнесе",
			Description: "Развитие стратегического мышления и навыков принятия решений. Анализ рисков и возможностей",
			EventDate:   time.Now().Add(192 * time.Hour),
			SecretInfo:  "Zoom Meeting ID: 456-789-012, Password: strategy2024",
		},
		{
			EventID:     uuid.New(),
			CourseID:    courseMap["Стратегическое мышление и принятие решений"],
			Title:       "Кейс-стади: принятие сложных решений",
			Description: "Разбор реальных бизнес-кейсов и стратегий принятия решений",
			EventDate:   time.Now().Add(216 * time.Hour),
			SecretInfo:  "Google Meet: meet.google.com/case-studies",
		},
		// Мужская эффективность и тайм-менеджмент
		{
			EventID:     uuid.New(),
			CourseID:    courseMap["Мужская эффективность и тайм-менеджмент"],
			Title:       "Повышение личной эффективности",
			Description: "Техники тайм-менеджмента и повышения личной эффективности. Приоритизация и планирование",
			EventDate:   time.Now().Add(240 * time.Hour),
			SecretInfo:  "Google Meet: meet.google.com/efficiency-2024",
		},
		{
			EventID:     uuid.New(),
			CourseID:    courseMap["Мужская эффективность и тайм-менеджмент"],
			Title:       "Мастер-класс по тайм-менеджменту",
			Description: "Практический мастер-класс по эффективному управлению временем",
			EventDate:   time.Now().Add(264 * time.Hour),
			SecretInfo:  "Discord: discord.gg/time-management",
		},
		// Бизнес-переговоры и убеждение
		{
			EventID:     uuid.New(),
			CourseID:    courseMap["Бизнес-переговоры и убеждение"],
			Title:       "Искусство бизнес-переговоров",
			Description: "Техники ведения переговоров и убеждения. Достижение взаимовыгодных соглашений",
			EventDate:   time.Now().Add(288 * time.Hour),
			SecretInfo:  "Discord: discord.gg/negotiations",
		},
		{
			EventID:     uuid.New(),
			CourseID:    courseMap["Бизнес-переговоры и убеждение"],
			Title:       "Ролевая игра: сложные переговоры",
			Description: "Практическая отработка навыков ведения сложных переговоров",
			EventDate:   time.Now().Add(312 * time.Hour),
			SecretInfo:  "Zoom Meeting ID: 789-012-345, Password: negotiations2024",
		},
		// Мужское сообщество и менторство
		{
			EventID:     uuid.New(),
			CourseID:    courseMap["Мужское сообщество и менторство"],
			Title:       "Менторство в бизнес-сообществе",
			Description: "Развитие менторских навыков и создание поддерживающего сообщества. Передача опыта и знаний",
			EventDate:   time.Now().Add(336 * time.Hour),
			SecretInfo:  "Zoom Meeting ID: 321-654-987, Password: mentor2024",
		},
		{
			EventID:     uuid.New(),
			CourseID:    courseMap["Мужское сообщество и менторство"],
			Title:       "Менторская сессия",
			Description: "Индивидуальные менторские сессии с опытными предпринимателями",
			EventDate:   time.Now().Add(360 * time.Hour),
			SecretInfo:  "Google Meet: meet.google.com/mentorship",
		},
		// Личный бренд и репутация
		{
			EventID:     uuid.New(),
			CourseID:    courseMap["Личный бренд и репутация"],
			Title:       "Построение личного бренда",
			Description: "Создание и развитие сильного личного бренда. Управление репутацией в бизнесе",
			EventDate:   time.Now().Add(384 * time.Hour),
			SecretInfo:  "Google Meet: meet.google.com/personal-brand",
		},
		{
			EventID:     uuid.New(),
			CourseID:    courseMap["Личный бренд и репутация"],
			Title:       "Мастер-класс по управлению репутацией",
			Description: "Практические инструменты управления репутацией в бизнесе",
			EventDate:   time.Now().Add(408 * time.Hour),
			SecretInfo:  "Discord: discord.gg/reputation-management",
		},
		// Мужское здоровье и энергия
		{
			EventID:     uuid.New(),
			CourseID:    courseMap["Мужское здоровье и энергия"],
			Title:       "Управление энергией и здоровьем",
			Description: "Техники управления энергией и стрессом. Поддержание здоровья для максимальной эффективности",
			EventDate:   time.Now().Add(432 * time.Hour),
			SecretInfo:  "Discord: discord.gg/health-energy",
		},
		{
			EventID:     uuid.New(),
			CourseID:    courseMap["Мужское здоровье и энергия"],
			Title:       "Воркшоп по энергетическим практикам",
			Description: "Практический воркшоп по энергетическим практикам для бизнесменов",
			EventDate:   time.Now().Add(456 * time.Hour),
			SecretInfo:  "Zoom Meeting ID: 654-321-987, Password: energy2024",
		},
		// Бизнес-этика и ценности
		{
			EventID:     uuid.New(),
			CourseID:    courseMap["Бизнес-этика и ценности"],
			Title:       "Бизнес-этика и социальная ответственность",
			Description: "Формирование сильных бизнес-ценностей. Этичное ведение бизнеса и социальная ответственность",
			EventDate:   time.Now().Add(480 * time.Hour),
			SecretInfo:  "Zoom Meeting ID: 789-012-345, Password: ethics2024",
		},
		{
			EventID:     uuid.New(),
			CourseID:    courseMap["Бизнес-этика и ценности"],
			Title:       "Дискуссия: ценности в современном бизнесе",
			Description: "Открытая дискуссия о ценностях и этике в современном бизнесе",
			EventDate:   time.Now().Add(504 * time.Hour),
			SecretInfo:  "Google Meet: meet.google.com/business-values",
		},
	}

	for _, event := range events {
		err := eventRepo.DB.Transaction(func(tx *gorm.DB) error {
			var existingEvent entity.Event
			err := tx.Where("title = ?", event.Title).First(&existingEvent).Error
			if err != nil {
				if errors.Is(err, gorm.ErrRecordNotFound) {
					if err := tx.Create(event).Error; err != nil {
						return fmt.Errorf("failed to create event: %v", err)
					}
					log.Printf("Created event: %s", event.Title)
				} else {
					return fmt.Errorf("failed to check existing event: %v", err)
				}
			} else {
				log.Printf("Event already exists: %s", event.Title)
			}
			return nil
		})

		if err != nil {
			log.Printf("Warning: Failed to process event %s: %v", event.Title, err)
			continue
		}
	}

	return nil
}

func seedCoursePrices(courseRepo *repository.CourseRepo) error {
	var courses []entity.Course
	if err := courseRepo.DB.Find(&courses).Error; err != nil {
		return fmt.Errorf("failed to get courses for prices: %v", err)
	}

	courseMap := make(map[string]uuid.UUID)
	for _, course := range courses {
		courseMap[course.Title] = course.CourseID
	}

	prices := []struct {
		CourseTitle string
		Amount      float64
	}{
		{
			CourseTitle: "Мужское лидерство и харизма",
			Amount:      29900,
		},
		{
			CourseTitle: "Бизнес-сообщество и нетворкинг",
			Amount:      24900,
		},
		{
			CourseTitle: "Мужская психология и эмоциональный интеллект",
			Amount:      27900,
		},
		{
			CourseTitle: "Стратегическое мышление и принятие решений",
			Amount:      29900,
		},
		{
			CourseTitle: "Мужская эффективность и тайм-менеджмент",
			Amount:      24900,
		},
		{
			CourseTitle: "Бизнес-переговоры и убеждение",
			Amount:      27900,
		},
		{
			CourseTitle: "Мужское сообщество и менторство",
			Amount:      32900,
		},
		{
			CourseTitle: "Личный бренд и репутация",
			Amount:      29900,
		},
		{
			CourseTitle: "Мужское здоровье и энергия",
			Amount:      24900,
		},
		{
			CourseTitle: "Бизнес-этика и ценности",
			Amount:      27900,
		},
	}

	for _, price := range prices {
		courseID, exists := courseMap[price.CourseTitle]
		if !exists {
			log.Printf("Warning: Course not found for price: %s", price.CourseTitle)
			continue
		}

		newPrice := &entity.CoursePrice{
			CourseID:     courseID,
			Amount:       price.Amount,
			CurrencyCode: "RUB",
		}

		err := courseRepo.DB.Transaction(func(tx *gorm.DB) error {
			var existingPrice entity.CoursePrice
			err := tx.Where("course_id = ?", courseID).First(&existingPrice).Error
			if err != nil {
				if errors.Is(err, gorm.ErrRecordNotFound) {
					if err := tx.Create(newPrice).Error; err != nil {
						return fmt.Errorf("failed to create course price: %v", err)
					}
					log.Printf("Created price for course: %s", price.CourseTitle)
				} else {
					return fmt.Errorf("failed to check existing price: %v", err)
				}
			} else {
				log.Printf("Price already exists for course: %s", price.CourseTitle)
			}
			return nil
		})

		if err != nil {
			log.Printf("Warning: Failed to process price for course %s: %v", price.CourseTitle, err)
			continue
		}
	}

	return nil
}

func seedUserTransactions(userRepo *repository.UserRepo, courseRepo *repository.CourseRepo) error {
	var users []entity.User
	if err := userRepo.DB.Find(&users).Error; err != nil {
		return fmt.Errorf("failed to get users for transactions: %v", err)
	}

	var courses []entity.Course
	if err := courseRepo.DB.Find(&courses).Error; err != nil {
		return fmt.Errorf("failed to get courses for transactions: %v", err)
	}

	// Создаем тестовые транзакции для каждого пользователя
	for _, user := range users {
		// Пропускаем админа
		if user.Role == 1 {
			continue
		}

		// Для каждого пользователя создаем 2-3 транзакции
		numTransactions := 2 + (user.ID.String()[0] % 2)

		for i := 0; i < int(numTransactions); i++ {
			course := courses[i%len(courses)]

			var coursePrice entity.CoursePrice
			if err := courseRepo.DB.Where("course_id = ?", course.CourseID).First(&coursePrice).Error; err != nil {
				log.Printf("Warning: Failed to get price for course %s: %v", course.Title, err)
				continue
			}

			var status string
			var amount float64

			switch i {
			case 0:
				status = "completed"
			case 1:
				status = "pending"
				amount = coursePrice.Amount
			default:
				status = "failed"
				amount = coursePrice.Amount
			}

			transaction := &entity.Payment{
				PaymentID:    uuid.New(),
				UserID:       user.ID,
				CourseID:     course.CourseID,
				Amount:       amount,
				CurrencyCode: coursePrice.CurrencyCode,
				Status:       status,
				CreatedAt:    time.Now().Add(-time.Duration(i*24) * time.Hour),
			}

			err := userRepo.DB.Transaction(func(tx *gorm.DB) error {
				if err := tx.Create(transaction).Error; err != nil {
					return fmt.Errorf("failed to create transaction: %v", err)
				}
				log.Printf("Created transaction for user %s, course %s, status %s", user.ID, course.Title, status)
				return nil
			})

			if err != nil {
				log.Printf("Warning: Failed to process transaction for user %s: %v", user.ID, err)
				continue
			}
		}
	}

	return nil
}

func seedCourseAssignments(userRepo *repository.UserRepo, courseRepo *repository.CourseRepo) error {
	// Get all users and courses
	users, err := userRepo.GetUsers()
	if err != nil {
		return fmt.Errorf("failed to get users: %v", err)
	}
	log.Printf("Found %d users", len(users))

	courses, err := courseRepo.GetCourses()
	if err != nil {
		return fmt.Errorf("failed to get courses: %v", err)
	}
	log.Printf("Found %d courses", len(courses))

	// Create a map of course titles to IDs
	courseMap := make(map[string]uuid.UUID)
	for _, course := range courses {
		courseMap[course.Name] = course.CourseID
	}

	// Assign courses to users
	for _, user := range users {
		log.Printf("Processing user %s with role %d", user.ID, user.Role)

		// Admin gets all courses
		if user.Role == 1 {
			log.Printf("User %s is admin, assigning all courses", user.ID)
			for _, course := range courses {
				// Check if assignment already exists
				existingAssignment, err := courseRepo.GetCourseAssignment(course.CourseID, user.ID)
				if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
					log.Printf("Error checking existing assignment for admin %s and course %s: %v", user.ID, course.Name, err)
					continue
				}

				if existingAssignment != nil {
					log.Printf("Assignment already exists for admin %s and course %s", user.ID, course.Name)
					continue
				}

				assignment := &entity.CourseAssignment{
					CaID:     uuid.New(),
					UserID:   user.ID,
					CourseID: course.CourseID,
					Progress: 0,
				}
				err = courseRepo.CreateCourseAssignment(assignment)
				if err != nil {
					log.Printf("Warning: Failed to create course assignment for admin %s and course %s: %v", user.ID, course.Name, err)
				} else {
					log.Printf("Successfully created course assignment for admin %s and course %s", user.ID, course.Name)
				}
			}
			continue
		}

		// Regular users get random courses
		numCourses := rand.Intn(4) + 2 // 2-5 courses per user
		availableCourses := make([]uuid.UUID, len(courses))
		for i, course := range courses {
			availableCourses[i] = course.CourseID
		}
		rand.Shuffle(len(availableCourses), func(i, j int) {
			availableCourses[i], availableCourses[j] = availableCourses[j], availableCourses[i]
		})

		for i := 0; i < numCourses && i < len(availableCourses); i++ {
			progress := uint(rand.Intn(101)) // Random progress 0-100
			assignment := &entity.CourseAssignment{
				CaID:     uuid.New(),
				UserID:   user.ID,
				CourseID: availableCourses[i],
				Progress: progress,
			}
			err = courseRepo.CreateCourseAssignment(assignment)
			if err != nil {
				log.Printf("Warning: Failed to create course assignment for user %s and course %s: %v", user.ID, courses[i].Name, err)
			}
		}
	}

	return nil
}
