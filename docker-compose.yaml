services:
  frontend:
    build:
      context: ../mzt-frontend
      dockerfile: Dockerfile
    container_name: mzt-frontend
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network
    depends_on:
      - app

  app:
    build: .
    container_name: mzt-app
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080:8080"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8080"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - app-network

  db:
    image: postgres:latest
    container_name: db
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${PGDATABASE}
      POSTGRES_USER: ${PGUSER}
      POSTGRES_PASSWORD: ${PGPASSWORD}
    ports:
      - "${PGPORT}:${PGPORT}"
    volumes:
      - pg_data1:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    container_name: mzt-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/conf.d:/etc/nginx/conf.d
      - ../nginx/ssl:/etc/nginx/ssl
      - ../certbot/conf:/etc/letsencrypt
      - ../certbot/www:/var/www/certbot
    depends_on:
      - frontend
      - app
    restart: unless-stopped
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    container_name: mzt-certbot
    volumes:
      - ../certbot/conf:/etc/letsencrypt
      - ../certbot/www:/var/www/certbot
    networks:
      - app-network
    depends_on:
      - nginx

networks:
  app-network:
    driver: bridge

volumes:
  pg_data1:
